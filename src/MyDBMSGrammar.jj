options
{
  static = true;
  DEBUG_PARSER = false;
  IGNORE_CASE = true;
}

PARSER_BEGIN(MyDBMSParser)

import java.util.ArrayList;
import jnDB.*;
import jnDB.type.*;

public class MyDBMSParser
{
  public static final String SYNTAX_ERROR = "Syntax error";
  public static final String PROMPT = "DB_2015-18380> ";
  
  public static JnDatabase jdb;
  
  public static void main(String args[]) throws ParseException
  {
    jdb = new JnDatabase();

    jdb.open("db/", "myDatabase");
    
    MyDBMSParser parser = new MyDBMSParser(System.in);
    System.out.print(PROMPT);
  
    while (true){
      try {
        parser.command();
        break;
      }
      catch (RuntimeException e) {
        printMessage(e.getMessage());
      }
      catch (Throwable e) {
        printMessage(SYNTAX_ERROR);
      }
      finally {
        MyDBMSParser.ReInit(System.in);
      }
    }

	jdb.close();
  }

  public static void printMessage(String s) {
    System.out.println(s);
    System.out.print(PROMPT);
  }
}

PARSER_END(MyDBMSParser)

SKIP : { " " | "\r" | "\t" | "\n" }

/* KEYWORDS token should be in front of LEGAL_IDENTIFIER.
 * Because javacc lexer generator choose token following rule
 * 1. choose the token that most characters are matched.
 * 2. if the number of characters matched is same, choose the token that defined earlier.
 */

TOKEN : /* Keywords */
{
  < EXIT : "exit" >
| < INT : "int" >
| < CHAR : "char" >
| < DATE : "date" >
| < CREATE : "create" >
| < DROP : "drop" >
| < DESC : "desc" >
| < SHOW : "show" >
| < SELECT : "select" >
| < INSERT : "insert" >
| < DELETE : "delete" >
| < TABLE : "table" >
| < TABLES : "tables" >
| < VALUES : "values" >
| < FROM : "from" >
| < WHERE : "where" >
| < INTO : "into" >
| < AS : "as" >
| < IS : "is" >
| < NOT : "not" >
| < OR : "or" >
| < AND : "and" >
| < NULL : "null" >
| < PRIMARY : "primary" >
| < FOREIGN : "foreign" >
| < KEY : "key" >
| < REFERENCES : "references" >
}

TOKEN :
{
  < CHAR_STRING : < QUOTE > (< NON_QUOTE_CHARACTER >)* < QUOTE > > 
| < INT_VALUE : (< SIGN >)? (< DIGIT >)+ >
| < DATE_VALUE : < NNNN > "-" < NN > "-" < NN > >
| < LEGAL_IDENTIFIER : < ALPHABET > (< ALPHABET > | < UNDERSCORE >)* >
| < #NNNN : < DIGIT > < DIGIT > < DIGIT > < DIGIT > >
| < #NN : < DIGIT > < DIGIT > >
| < COMP_OP : "<" | ">" | "=" | ">=" | "<=" | "!=" >
| < #SIGN : "+" | "-" >
| < SEMICOLON : ";" >
| < LEFT_PAREN : "(" >
| < RIGHT_PAREN : ")" >
| < COMMA : "," >
| < PERIOD : "." >
| < #UNDERSCORE : "_" >
| < ASTERISK : "*" >
| < #QUOTE : "'" >
| < #DIGIT : [ "0"-"9" ] >
| < #ALPHABET : [ "a"-"z", "A"-"Z" ] >
| < #NON_QUOTE_CHARACTER : ["~","`","!","@","#","$","%","^","&","*","(",")","-","_","=","+","[","]","{","}","\\","|",";",":",",",".","<",">","/","?"," "] | < ALPHABET > | < DIGIT > >
}

void command() :
{}
{
  queryList()
  (    ( < EXIT > < SEMICOLON > )
  | ( < EOF > )
  )
}

void queryList() :
{}
{
  (
    query()
    { System.out.print(PROMPT); }
  )*
}

void query() :
{}
{
  createTableQuery()
| dropTableQuery()
| descQuery()
| showTablesQuery()
| selectQuery()
| insertQuery()
| deleteQuery()
}

void createTableQuery() :
{
  String tName;
  TableSchema schema;
}
{
  < CREATE > < TABLE >
  tName = tableName()
  { schema = new TableSchema(tName); }
  tableElementList(schema)
  < SEMICOLON >
  {
    jdb.createTable(schema);
  }
}

void dropTableQuery() :
{ String tName; }
{
  < DROP > < TABLE >
  tName = tableName()
  < SEMICOLON >
  {
    jdb.dropTable(tName);
  }
}

void descQuery() :
{ String tName; }
{
  < DESC >
  tName = tableName()
  < SEMICOLON >
  { jdb.desc(tName); }
}

void showTablesQuery() :
{}
{
  < SHOW > < TABLES >
  < SEMICOLON >
  { jdb.showTables(); }
}

void selectQuery() :
{}
{
  < SELECT >
  selectList()
  tableExpression()
  < SEMICOLON >
}

void insertQuery() :
{
  String tName;
  Pair<ArrayList<String>, ArrayList<Value>> listPair;
}
{
  < INSERT > < INTO >
  tName = tableName()
  listPair = insertColumnAndSource()
  < SEMICOLON >
  { jdb.insert(tName, listPair.first, listPair.second); }
}

void deleteQuery() :
{
  String tName;
}
{
  < DELETE > < FROM >
  tName = tableName()
  ( whereClause() )?
  < SEMICOLON >
}

void tableElementList(TableSchema schema) :
{}
{
  < LEFT_PAREN >
  tableElement(schema)
  (
    < COMMA >
    tableElement(schema)
  )*
  < RIGHT_PAREN >
}

void tableElement(TableSchema schema) :
{}
{
  columnDefinition(schema)
| tableConstraintDefinition(schema)
}

void columnDefinition(TableSchema schema) :
{
  String cName;
  Type type;
  boolean isNotNull = false;
}
{
  cName = columnName()
  type = dataType()
  (
    < NOT > < NULL >
    { isNotNull = true; }
  )?
  { schema.addColumn(cName, type, isNotNull); }
}

void tableConstraintDefinition(TableSchema schema) :
{}
{
  primaryKeyConstraint(schema)
| referentialConstraint(schema)
}

void primaryKeyConstraint(TableSchema schema) :
{ ArrayList<String> cnList; }
{
  < PRIMARY > < KEY >
  cnList = columnNameList()
  { schema.setPrimaryKey(cnList); }
}

void referentialConstraint(TableSchema schema) :
{
  String tName;
  ArrayList<String> cnList1,cnList2;
  Table table;
}
{
  < FOREIGN > < KEY >
  cnList1 = columnNameList()
  < REFERENCES >
  tName = tableName()
  cnList2 = columnNameList()
  {
    table = jdb.checkPrimaryKey(tName,cnList2);
    schema.addReferentialKey(cnList1, table, cnList2);
  }
}


void selectList() :
{}
{
  < ASTERISK >
| (
    selectedColumn()
    (
      < COMMA >
      selectedColumn()
    )*
  )
}

void selectedColumn() :
{}
{
  (
    // both tableName and columnName are start with LEGAL_IDENTIFIER.
    // so we should LOOKAHEAD one more token to determine whether this part is exist.
    LOOKAHEAD(2)
    tableName()
    < PERIOD >
  )?
  columnName()
  (
    < AS >
    columnName()
  )?
}

void tableExpression() :
{}
{
  fromClause()
  ( whereClause() )?
}

void fromClause() :
{}
{
  < FROM >
  tableReferenceList()
}

void whereClause() :
{}
{
  < WHERE >
  booleanValueExpression()
}

void tableReferenceList() :
{}
{
  referedTable()
  (    < COMMA >
    referedTable()
  )*
}

void referedTable() :
{}
{
  tableName()
  (    < AS >
    tableName()
  )?
}

void booleanValueExpression() :
{}
{
  // if we choose booleanValueExpression() < OR > booleanTerm() , left recursion can occur(infinite loop).
  // so we can change it and write like below.
   booleanTerm()
  (
    < OR >
    booleanTerm()
  )*
}

void booleanTerm() :
{} 
{
  booleanFactor()
  (
    < AND >
    booleanFactor()
  )*
}

void booleanFactor() :
{}
{
  ( < NOT > )?
  booleanTest()
}

void booleanTest() :
{}
{
  predicate()
| parenthesizedBooleanExpression()
}

void parenthesizedBooleanExpression() :
{}
{
  < LEFT_PAREN >
  booleanValueExpression()
  < RIGHT_PAREN >
}

void predicate() :
{}
{
  // both comparisonPredicate and nullPredicate can start with < LEGAL_IDENTIFIER > "." < LEGAL_IDENTIFIER >.
  // so we should LOOKAHEAD 3 more token to determine choice point.
  LOOKAHEAD(4)
  comparisonPredicate()
| nullPredicate()
}

void nullPredicate() :
{
  String tName = null,cName;
  boolean isNull;
}
{
  (
    LOOKAHEAD(2)
    tName = tableName()
    < PERIOD >
  )?
  cName = columnName()
  isNull = nullOperation()
  
}

boolean nullOperation() :
{
  boolean isNull = true;
}
{
  < IS >
  (
    < NOT >
    { isNull = false; }
  )?
  < NULL >
  { return isNull; }
}

void comparisonPredicate() :
{}
{
  compOperand()
  < COMP_OP >
  compOperand()
}

void compOperand() :
{
}
{
  comparableValue()
| (
    (
      LOOKAHEAD(2)
      tableName()
      < PERIOD >
    )?
    columnName()
  )
}

Pair<ArrayList<String>, ArrayList<Value>> insertColumnAndSource() :
{
  ArrayList<String> cnList = null;
  ArrayList<Value> vList;
}
{
  (    cnList = columnNameList()
  )?
  vList = valueList()
  { return new Pair<ArrayList<String>, ArrayList<Value>>(cnList,vList); }
}

ArrayList<String> columnNameList() :
{
  ArrayList<String> cnList = new ArrayList<String>();
  String cName;
}
{
  < LEFT_PAREN >
  cName = columnName()
  { cnList.add(cName); }
  (
    < COMMA >
    cName = columnName()
    { cnList.add(cName); }
  )*
  < RIGHT_PAREN >
  { return cnList; }
}

ArrayList<Value> valueList() :
{
  ArrayList<Value> vList = new ArrayList<Value>();
  Value v;
}
{
  < VALUES >
  < LEFT_PAREN >
  v = value()
  { vList.add(v); }
  (    < COMMA >
    value()
    { vList.add(v); }
  )*
  < RIGHT_PAREN >
  { return vList; }
}

Value value() :
{
  Value value;
}
{
  (
    (      < NULL >
      {  value = new NullValue(); }
    )
  | (
      value = comparableValue()
    )
  )
  ( { return value; } )
}

Value comparableValue() :
{
  Token token;
  Value value;
}
{
  (    (      token = < INT_VALUE >
      { value = new IntValue(Integer.parseInt(token.toString())); }
    )
  | (
      token = < CHAR_STRING >
      { value = new CharValue(token.toString()); }
    )
  | (
      token = < DATE_VALUE >
      { value = new DateValue(token.toString()); }
    )
  )
  ( { return value; } )
}

Type dataType() :
{
  Token l;
  Type type;
}
{
  (
    (
      < INT >
      { type = new IntType(); }
    )
  | (
      < CHAR >
      < LEFT_PAREN >
      l = < INT_VALUE >
      < RIGHT_PAREN >
      { type = new CharType(Integer.parseInt(l.toString())); }
    )
  | (
      < DATE >
      { type = new DateType(); }
    )
  )
  ( { return type; } )
}

String tableName() :
{ Token l_id; }
{
  l_id = < LEGAL_IDENTIFIER >
  { return l_id.toString().toLowerCase(); }
}

String columnName() :
{ Token l_id; }
{
  l_id = < LEGAL_IDENTIFIER >
  { return l_id.toString().toLowerCase(); }
}
