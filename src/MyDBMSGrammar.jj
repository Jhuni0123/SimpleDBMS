options
{
  static = true;
  DEBUG_PARSER = false;
  IGNORE_CASE = true;
}

PARSER_BEGIN(MyDBMSParser)

public class MyDBMSParser
{
  public static final int PRINT_SYNTAX_ERROR = 0;
  public static final int PRINT_CREATE_TABLE = 1;
  public static final int PRINT_DROP_TABLE = 2;
  public static final int PRINT_DESC = 3;
  public static final int PRINT_SHOW_TABLES = 4;
  public static final int PRINT_SELECT = 5;
  
  public static void main(String args[]) throws ParseException
  {
    MyDBMSParser parser = new MyDBMSParser(System.in);
    System.out.print("DB_2015-18380> ");

    while (true)
    {
      try
      {
        parser.command();
      }
      catch (Exception e)
      {
        printMessage(PRINT_SYNTAX_ERROR);
        MyDBMSParser.ReInit(System.in);
      }
    }
  }

  public static void printMessage(int q)
  {
    switch(q)
    {
      case PRINT_SYNTAX_ERROR:
      	System.out.println("Syntax error");
      	break;
      case PRINT_CREATE_TABLE:
      	System.out.println("\'CREATE TABLE\' requested");
      	break;
      case PRINT_DROP_TABLE:
      	System.out.println("\'DROP TABLE\' requested");
      	break;
      case PRINT_DESC:
      	System.out.println("\'DESC\' requested");
      	break;
      case PRINT_SHOW_TABLES:
      	System.out.println("\'SHOW TABLES\' requested");
      	break;
      case PRINT_SELECT:
      	System.out.println("\'SELECT\' requested");
      	break;
    }
    System.out.print("DB_2015-18380> ");
  }
}

PARSER_END(MyDBMSParser)

SKIP : { " " | "\r" | "\t" | "\n" }

TOKEN : /* Keywords */
{
  < EXIT : "exit" >
| < INT : "int" >
| < CHAR : "char" >
| < DATE : "date" >
| < CREATE : "create" >
| < DROP : "drop" >
| < DESC : "desc" >
| < SHOW : "show" >
| < SELECT : "select" >
| < TABLE : "table" >
| < TABLES : "tables" >
| < FROM : "from" >
| < WHERE : "where" >
| < AS : "as" >
| < NOT : "not" >
| < OR : "or" >
| < AND : "and" >
| < NULL : "null" >
| < PRIMARY : "primary" >
| < FOREIGN : "foreign" >
| < KEY : "key" >
| < REFERENCES : "references" >
}

TOKEN :
{
  < SEMICOLON : ";" >
| < LEFT_PAREN : "(" >
| < RIGHT_PAREN : ")" >
| < COMMA : "," >
| < PERIOD : "." >
| < UNDERSCORE : "_" >
| < ASTERISK : "*" >
| < QUOTE : "'" >
| < CHAR_STRING : < QUOTE > (< NON_QUOTE_CHARACTER >)* < QUOTE > > 
| < INT_VALUE : (< SIGN >)? (< DIGIT >)+ >
| < DATE_VALUE : < NNNN > "-" < NN > "-" < NN > >
| < SIGN : "+" | "-" >
| < DIGIT : [ "0"-"9" ] >
| < LEGAL_IDENTIFIER : < ALPHABET > (< ALPHABET > | < UNDERSCORE >)* >
| < ALPHABET : [ "a"-"z", "A"-"Z" ] >
| < NON_QUOTE_CHARACTER : < DIGIT > | < ALPHABET > | < NON_QUOTE_SPECIAL_CHARACTERS > | " " >
| < NON_QUOTE_SPECIAL_CHARACTERS : ["`","-","=","~","!","@","#","$","%","^","&","*","(",")","_","+","[","]","{","}",";",":",",",".","/","<",">","?","\\","|"] >
| < NNNN : < DIGIT > < DIGIT > < DIGIT > < DIGIT > >
| < NN : < DIGIT > < DIGIT > >
| < COMP_OP : "<"|">"|"="|">="|"<="|"!=" >
}

void command() :
{}
{
  queryList()
| (
    < EXIT >
    < SEMICOLON >
    {
      System.exit(0);
    }
  ) 
}

void queryList() :
{
  int q;
}
{
  (
    q = query()
    < SEMICOLON >
    {
      printMessage(q);
    }
  )+
}

int query() :
{
  int q;
}
{
  (
    (
      createTableQuery()
      { q = PRINT_CREATE_TABLE; }
    )
  | (
      dropTableQuery()
      { q = PRINT_DROP_TABLE; }
    )
  | (
      descQuery()
      { q = PRINT_DESC; }
    )
  | (
      showTablesQuery()
      { q = PRINT_SHOW_TABLES; }
    )
  | (
      selectQuery()
      { q = PRINT_SELECT; }
    )
  )
  (
    {
      return q;
    }
  )
}

void createTableQuery() :
{}
{
  < CREATE > < TABLE >
  tableName()
  tableElementList()
}

void dropTableQuery() :
{}
{
  < DROP > < TABLE >
  tableName()
}

void descQuery() :
{}
{
  < DESC >
  tableName()
}

void showTablesQuery() :
{}
{
  < SHOW > < TABLES >
}

void selectQuery() :
{}
{
  < SELECT >
  selectList()
  tableExpression()
}

void tableElementList() :
{}
{
  < LEFT_PAREN >
  tableElement()
  (
    < COMMA >
    tableElement()
  )*
  < RIGHT_PAREN >
}

void tableElement() :
{
}
{
  columnDefinition()
| tableConstraintDefinition()
}

void columnDefinition() :
{}
{
  columnName()
  dataType()
  (
    < NOT > < NULL >
  )?
}

void tableConstraintDefinition() :
{}
{
  primaryKeyConstraint()
| referentialConstraint()
}

void primaryKeyConstraint() :
{}
{
  < PRIMARY > < KEY >
  columnNameList()
}

void referentialConstraint() :
{}
{
  < FOREIGN > < KEY >
  columnNameList()
  < REFERENCES >
  tableName()
  columnNameList()
}


void selectList() :
{}
{
  < ASTERISK >
| (
    selectedColumn()
    (
      < COMMA >
      selectedColumn()
    )*
  )
}

void selectedColumn() :
{}
{
  (
    tableName()
    < PERIOD >
  )?
  columnName()
  (
    < AS >
    columnName()
  )?
}

void tableExpression() :
{}
{
  fromClause()
  (
    whereClause()
  )?
}

void fromClause() :
{}
{
  < FROM >
  tableReferenceList()
}

void whereClause() :
{}
{
  < WHERE >
  booleanValueExpression()
}

void tableReferenceList() :
{}
{
  referedTable()
  (    < COMMA >
    referedTable()
  )*
}

void referedTable() :
{}
{
  tableName()
  (    < AS >
    tableName()
  )?
}

void booleanValueExpression() :
{}
{
  booleanTerm()
| (
    booleanTerm()
    < OR >
    booleanValueExpression()
  )
}

void booleanTerm() :
{} 
{
  booleanFactor()
| (
    booleanFactor()
    < AND >
    booleanTerm()
  )
}

void booleanFactor() :
{}
{
  (    < NOT >
  )?
  booleanTest()
}

void booleanTest() :
{}
{
  predicate()
| parenthesizedBooleanExpression()
}

void parenthesizedBooleanExpression() :
{}
{
  < LEFT_PAREN >
  booleanValueExpression()
  < RIGHT_PAREN >
}

void predicate() :
{}
{
  comparisonPredicate()
| nullPredicate()
}

void nullPredicate() :
{}
{
  (    tableName()
    < PERIOD >
  )?
  columnName()
}

void comparisonPredicate() :
{}
{
  compOperand()
  < COMP_OP >
  compOperand()
}

void compOperand() :
{}
{
  comparableValue()
| (
    (
      tableName()
      < PERIOD >
    )?
    columnName()
  )
}

void comparableValue() :
{}
{
  < INT_VALUE >
| < CHAR_STRING >
| < DATE_VALUE >
}
void columnNameList() :
{}
{
  < LEFT_PAREN >
  columnName()
  (
    < COMMA >
    columnName()
  )*
  < RIGHT_PAREN >
}

void dataType() :
{}
{
  < INT >
| (
    < CHAR >
    < LEFT_PAREN >
    < INT_VALUE >
    < RIGHT_PAREN >
  )
| < DATE >
}

void tableName() :
{}
{
  < LEGAL_IDENTIFIER >
}

void columnName() :
{}
{
  < LEGAL_IDENTIFIER >
}